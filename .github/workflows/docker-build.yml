name: Publish Docker Image to ACR

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  build_and_push:
    runs-on: ubuntu-latest  # Run the workflow on an Ubuntu runner

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -f ./code/DOCKERFILE -t flask-crud-app ./ 

      # Optional: Save Docker image as tar (uncomment if needed)
      # - name: Save Docker image as tar
      #   run: docker save flask-crud-app -o flask-crud-app.tar

      # Optional: Zip the image tarball (uncomment if needed)
      # - name: Zip the image tarball
      #   run: zip flask-crud-app.zip flask-crud-app.tar

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{secrets.AZURE_CLIENT_ID}}
          creds: '{"clientId":"${{secrets.AZURE_CLIENT_ID}}","clientSecret":"${{secrets.AZURE_CLIENT_SECRET}}","tenantId":"${{secrets.AZURE_TENANT_ID}}"}'
          allow-no-subscriptions: true
          tenant-id: ${{secrets.AZURE_TENANT_ID}}
          subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Log in to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{secrets.ACR_NAME}} # ACR registry URL
          username: ${{secrets.AZURE_CLIENT_ID}}    # Using service principal as username
          password: ${{secrets.AZURE_CLIENT_SECRET}} # Using service principal secret

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{secrets.ACR_NAME}}/myapp:latest .  # Replace myapp with your image name
          docker push ${{secrets.ACR_NAME}}/myapp:latest  # Push the image to ACR